#provider "aws" {
#  region = "eu-west-1"
#  #  region = "us-east-1"
#
#  # Make it faster by skipping something
#  skip_get_ec2_platforms      = true
#  skip_metadata_api_check     = true
#  skip_region_validation      = true
#  skip_credentials_validation = true
#  skip_requesting_account_id  = true
#}
 
module "lambda_layer_python_paramiko" {
  source = "terraform-aws-modules/lambda/aws"

  create_layer = true

  layer_name  = "python_paramiko_lambda_layer"
  runtime     = "python3.7"
  compatible_runtimes = ["python3.7"]

  source_path = "./src/python_paramiko_lambda_layer"
}

#module "lambda_function_get_workspace_state" {
#  source = "terraform-aws-modules/lambda/aws"
#
#  publish = true
#
#  function_name = "get_workspace_state"
#  description   = "Returns state of prototype Linux Workspace"
#  handler       = "lambda_function.lambda_handler"
#  runtime       = "python3.7"
#
#  source_path = "./src/get_workspace_state_lambda/"
#
#  attach_cloudwatch_logs_policy = true
#
#  attach_policy_jsons = true
#  policy_jsons = [<<EOF
#{
#    "Version": "2012-10-17",
#    "Statement": [
#        {
#            "Effect": "Allow",
#            "Action": [
#                "ssm:GetParameter"
#            ],
#            "Resource": [
#                "arn:aws:ssm:*:*:parameter/workspaces/*"
#            ]
#        }
#    ]
#}
#EOF
#,
#<<EOF
#{
#    "Version": "2012-10-17",
#    "Statement": [
#        {
#            "Effect": "Allow",
#            "Action": [
#		"workspaces:DescribeWorkspaces"
#	    ]
#            "Resource": "*"
#        }
#    ]
#}
#EOF
#  ]
#  number_of_policy_jsons = 2
#}
#
#module "lambda_function_rebuild_workspaces" {
#  source = "terraform-aws-modules/lambda/aws"
#
#  publish = true
#
#  function_name = "rebuild_workspaces"
#  description   = "Rebuilds Workspaces in specified Directory"
#  handler       = "lambda_function.lambda_handler"
#  runtime       = "python3.7"
#
#  source_path = "./src/rebuild_workspaces_lambda/"
#
#  attach_cloudwatch_logs_policy = true
#
#  attach_policy_jsons = true
#  policy_jsons = [<<EOF
#{
#    "Version": "2012-10-17",
#    "Statement": [
#        {
#            "Effect": "Allow",
#            "Action": [
#                "ssm:GetParameter"
#            ],
#            "Resource": [
#                "arn:aws:ssm:*:*:parameter/workspaces/*"
#            ]
#        }
#    ]
#}
#EOF
#,
#<<EOF
#{
#    "Version": "2012-10-17",
#    "Statement": [
#        {
#            "Effect": "Allow",
#            "Action": [
#		"workspaces:DescribeWorkspaces",
#		"workspaces:RebuildWorkspaces"
#            ],
#            "Resource": "*"
#        }
#    ]
#}
#EOF
#  ]
#  number_of_policy_jsons = 2
#}
#
module "lambda_configure_linux_workspace" {
  source = "terraform-aws-modules/lambda/aws"

  publish = true

  function_name = "configure_linux_workspace"
  description   = "Installs software on prototype Linux Workspace"
  handler       = "lambda_function.lambda_handler"
  runtime       = "python3.7"

  source_path = "./src/configure_linux_workspace_lambda/"

#  vpc_subnet_ids         = module.vpc.intra_subnets
#  vpc_security_group_ids = [module.vpc.default_security_group_id]
#  attach_network_policy  = true

  attach_cloudwatch_logs_policy = true

  attach_policy_jsons = true
  policy_jsons = [<<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter",
                "kms:Decrypt"
            ],
            "Resource": [
                "arn:aws:ssm:*:*:parameter/workspaces/*",
                "arn:aws:kms:*:*:key/alias/aws/ssm"
            ]
        }
    ]
}
EOF
,
<<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
		"workspaces:DescribeWorkspaces",
		"workspaces:RebuildWorkspaces"
            ],
            "Resource": "*"
        }
    ]
}
EOF
  ]
  number_of_policy_jsons = 2
}

module "lambda_check_for_new_workspace_image" {
  source = "terraform-aws-modules/lambda/aws"

  publish = true

  function_name = "check_for_new_workspace_image"
  description   = "Checks for AVAILABLE Workspace Image created since completion time of configure_linux_workspace"
  handler       = "lambda_function.lambda_handler"
  runtime       = "python3.7"

  source_path = "./src/check_for_new_workspace_image_lambda/"

  attach_cloudwatch_logs_policy = true

  attach_policy_jsons = true
  policy_jsons = [<<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
		"workspaces:DescribeWorkspaceImages"
            ],
            "Resource": "*"
        }
    ]
}
EOF
  ]
  number_of_policy_jsons = 1
}

module "lambda_update_workspace_bundle" {
  source = "terraform-aws-modules/lambda/aws"

  publish = true

  function_name = "update_workspace_bundle"
  description   = "Updates Workspace Bundle with new Image ID"
  handler       = "lambda_function.lambda_handler"
  runtime       = "python3.7"

  source_path = "./src/update_workspace_bundle_lambda/"

  attach_cloudwatch_logs_policy = true

  attach_policy_jsons = true
  policy_jsons = [<<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": [
                "arn:aws:ssm:*:*:parameter/workspaces/*"
            ]
        }
    ]
}
EOF
,
<<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
		"workspaces:UpdateWorkspaceBundle"
            ],
            "Resource": "*"
        }
    ]
}
EOF
  ]
  number_of_policy_jsons = 2
}

module "step_function_workspaces_management" {
  source = "terraform-aws-modules/step-functions/aws"

  name       = "my-step-function"
  definition = templatefile("./step_function_workspaces_management.tpl",{})

  service_integrations = {
    lambda = {
      lambda = [
              #module.lambda_function_get_workspace_state.lambda_function_arn,
              #module.lambda_function_rebuild_workspaces.lambda_function_arn,
              module.lambda_configure_linux_workspace.lambda_function_arn,
              module.lambda_check_for_new_workspace_image.lambda_function_arn,
              module.lambda_update_workspace_bundle.lambda_function_arn
      ]
    }
  }
}
